# Copied from https://github.com/abetlen/llama-cpp-python/blob/22917989003c5e67623d54ab45affa1e0e475410/docker/cuda_simple/Dockerfile
ARG CUDA_IMAGE="12.6.3-devel-ubuntu22.04"
FROM nvidia/cuda:${CUDA_IMAGE}
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# We need to set the host to 0.0.0.0 to allow outside access
ENV HOST=0.0.0.0

SHELL ["/bin/bash", "-c"]
RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y git build-essential python3 gcc wget \
    ocl-icd-opencl-dev opencl-headers clinfo libclblast-dev libopenblas-dev \
    && mkdir -p /etc/OpenCL/vendors \
    && echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

# setting build related env vars
ENV CUDA_DOCKER_ARCH=all
ENV LLAMA_CUBLAS=1

# Install dependencies
RUN uv venv --seed --python 3.10 /opt/venv
# Use the virtual environment automatically
ENV VIRTUAL_ENV=/opt/venv
# Place entry points in the environment at the front of the path
ENV PATH="/opt/venv/bin:$PATH"
RUN uv pip install torch torchvision torchaudio --torch-backend=auto
RUN uv pip install --upgrade pytest cmake scikit-build fastapi uvicorn \
  sse-starlette pydantic-settings starlette-context

# Install llama-cpp-python (build with cuda)
RUN CMAKE_ARGS="-DGGML_CUDA=on" FORCE_CMAKE=1 python -m pip install --upgrade \
    --force-reinstall llama-cpp-python --no-cache-dir

# Install Streamlit
RUN uv pip install streamlit

# Copy the context in, and use it to install onprem from source
COPY . .
RUN uv pip install -e .

# Default to launching into the REPL
CMD ["python3"]