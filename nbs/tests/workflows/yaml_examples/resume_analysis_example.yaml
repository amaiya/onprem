# Example: Resume analysis using complex JSON extraction prompt
nodes:
  # Load resume documents
  resume_loader:
    type: LoadFromFolder
    config:
      source_directory: "../sample_data/resumes"  # Folder with resume files
      include_patterns: ["*.pdf", "*.docx", "*.txt"]
      verbose: true
  
  # Keep resumes as full documents and concatenate multi-page PDFs
  full_resumes:
    type: KeepFullDocument
    config:
      concatenate_pages: true  # Combine multi-page resumes into single document
  
  # Store resumes in searchable index
  resume_index:
    type: WhooshStore
    config:
      persist_location: "resume_index"
  
  # Query for specific types of resumes
  tech_resumes:
    type: QueryWhooshStore
    config:
      persist_location: "resume_index"
      query: "python machine learning data science software engineer"
      limit: 10
  
  # Apply structured resume extraction
  resume_parser:
    type: PromptProcessor
    config:
      prompt_file: "prompts/resume_extraction.txt"  # Complex JSON extraction prompt
      model_name: "gpt-4"
      batch_size: 1  # One at a time for complex JSON extraction
  
  # Export structured resume data
  parsed_resumes:
    type: JSONExporter
    config:
      output_path: "parsed_resumes.json"
      pretty_print: true

connections:
  # Storage pipeline
  - from: resume_loader
    from_port: documents
    to: full_resumes
    to_port: documents
  
  - from: full_resumes
    from_port: documents
    to: resume_index
    to_port: documents
  
  # Analysis pipeline
  - from: tech_resumes
    from_port: documents
    to: resume_parser
    to_port: documents
  
  - from: resume_parser
    from_port: results
    to: parsed_resumes
    to_port: results